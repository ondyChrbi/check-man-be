scalar DateTime
scalar JSON

type Query {
    courses: [Course!]!
    challenges(semesterId: ID!): [Challenge!]!
    requirements(challengeId: ID!): [Requirement!]!
    course(id: ID!): Course
    semester(id: ID!): Semester
    semesters(courseId: ID!, oderBy: SemesterOrderByField, sortOrder: SortOrder, pageSize: Int, page: Int): [Semester!]!
    challenge(id: ID!): Challenge
    me: AppUser!
    appUser(id: ID!): AppUser!
    myCourses: [Course!]!
    availableCourses: [Course!]!
    courseRoles(id: ID!): [String!]!
    allCourseRoles: [CourseSemesterRole!]!
    solutions(challengeId: ID!): [Solution!]!
    solution(id: ID!): Solution!
    countToReview(challengeId: ID!): Int!
    solutionsToReview(challengeId: ID!, offset: Int, size: Int): [Solution!]!
    allSolutionsToReview(courseId: ID!): [CoursesReviewList]
}

type Mutation {
    createCourse(input: CourseInput!): Course!
    createSemester(courseId: ID!, input: SemesterInput!): Semester!
    createChallenge(semesterId: ID!, input: ChallengeInput!): Challenge!
    editChallenge(challengeId: ID!, input: ChallengeInput!): Challenge!
    deleteChallenge(challengeId: ID!): Challenge!
    createRequirement(challengeId: ID!, input: RequirementInput!): Requirement!
    editRequirement(requirementId: ID!, input: RequirementInput!): Requirement!
    removeRequirement(requirementId: ID!): Requirement!
    createSemesterAccessRequest(semesterId: ID!): CourseSemesterAccessRequest!
    publishChallenge(challengeId: ID!): Boolean
    createFeedback(feedback: FeedbackInput!): Feedback!
    removeFeedbackFromReview(reviewId: ID!, feedbackId: ID!): Boolean
    addFeedbackToReview(reviewId: ID!, feedbackId: ID!): Boolean
    createFeedbackToReview(reviewId: ID!, feedback: FeedbackInput!): Feedback!
    createReview(solutionId: ID! reviewInput: ReviewInput!): Review!
    publishReview(id: ID!, status: String!): Boolean!
    editReview(id: ID!, input: ReviewInput!): Review!
    addCourseRole(appUserId: ID!, semesterId: ID!, roleId: ID!): Boolean
    removeCourseRole(appUserId: ID!, semesterId: ID!, roleId: ID!): Boolean
    editReviewPoints(reviewId: ID!, requirementId: ID!, reviewPointsInput: ReviewPointsInput!): Boolean
}

type AppUser{
    id: ID!
    stagId: String!
    mail: String!
    displayName: String!
    registrationDate: String!
    lastAccessDate: String!
    disabled: Boolean!
    globalRoles: [GlobalRole!]!
    courseRoles: [CourseSemesterRoles!]!
    roles(semesterId: ID!): [CourseSemesterRole!]!
}

type GlobalRole {
    id: ID!
    name: String!
}

type CourseSemesterAccessRequest {
    appUser: AppUser!,
    semester: Semester!,
    creationDate: String!,
    expirationDate: String!,
    id: String!
}

type Semester {
    id: ID!
    note: String
    dateStart: String!
    dateEnd: String!
    fulfillmentConditions: JSON
    relatedUsers(offset: Int, size: Int): [AppUser!]!

    page: Int
    pageSize: Int
}

type Challenge {
    id: ID!
    name: String!
    description: String!
    deadlineDate: String
    startDate: String
    author: AppUser
    published: Boolean,
    challengeKind: String!
    requirements: [Requirement!]!
}

type CourseSemesterRoles {
    semester: Semester!
    roles: [CourseSemesterRole!]!
}

type CourseSemesterRole {
    id: ID!
    name: String!
}

type Requirement {
    id: ID!,
    name: String!,
    description: String,
    active: Boolean!,
    minPoint: Int,
    maxPoint: Int
}

type ReviewedRequirement {
    id: ID!,
    points: Int
    description: String,
    requirement: Requirement,
}

type Course {
    id: ID
    stagId: String!
    name: String!
    dateCreation: String!
    icon: String
    template: String
    semesters(semesterSortBy: SemesterOrderByField): [Semester!]!
}

type ChallengeSolutions {
    challenge: Challenge,
    solutions: [Solution!]
}

type CoursesReviewList{
    course: Semester,
    reviews: [ChallengeSolutions!]!
}

type Solution {
    id: ID!
    uploadDate: DateTime!
    status: String!
    review: Review,
    author: AppUser
}

type Feedback {
    id: ID!,
    description: String!
    type: String!
}

type Review{
    id: ID!
    description: String!
    requirements: [ReviewedRequirement!]!
    feedbacks: [Feedback!]!
}

input CourseInput {
    stagId: String!
    name: String!
    icon: String
    template: String
    semesters: [SemesterInput]
}

input ChallengeInput {
    name: String!
    description: String
    deadlineDate: String
    startDate: String
    challengeKind: String!
}

input ReviewInput {
    description: String!
}

input SemesterInput {
    note: String
    dateStart: DateTime
    dateEnd: DateTime
}

input RequirementInput {
    name: String!,
    description: String,
    minPoint: Int,
    maxPoint: Int
}

input FeedbackInput {
    description: String!
    type: String!
}

input ReviewPointsInput {
    points: Int!
}

enum SemesterOrderByField {
    id,
    dateStart,
    dateEnd
}

enum SortOrder {
    ASC,
    DESC
}
