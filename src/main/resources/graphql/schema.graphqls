type Query {
    courses: [Course!]!
    course(id: ID!): Course
    semester(id: ID!): Semester
    me: AppUser!
    myCourses: [Course!]!
    availableCourses: [Course!]!
    courseDashboard: CourseDashboard!
}

type Mutation {
    createCourse(input: CourseInput!): Course!
    createSemesterAccessRequest(semesterId: ID!): CourseSemesterAccessRequest!
}

type AppUser{
    id: ID!
    stagId: String!
    mail: String!
    displayName: String!
    registrationDate: String!
    lastAccessDate: String!
    disabled: Boolean!
    globalRoles: [GlobalRole!]!
    courseRoles: [CourseSemesterRoles!]!
}

type GlobalRole {
    id: ID!
    name: String!
}

type CourseSemesterAccessRequest {
    appUser: AppUser!,
    semester: Semester!,
    creationDate: String!,
    expirationDate: String!,
    id: String!
}

type Semester {
    id: ID
    note: String
    dateStart: String!
    dateEnd: String!
}

type CourseSemesterRoles {
    semester: Semester!
    roles: [CourseSemesterRole!]!
}

type CourseSemesterRole {
    id: ID!
    name: String!
}

type Course {
    id: ID
    stagId: String!
    name: String!
    dateCreation: String!
    icon: String
    template: String
    semesters: [Semester!]!
}

type CourseDashboard {
    availableCourses: [Course!]!
    myCourses: [Course!]!
}

input CourseInput {
    stagId: String!
    name: String!
    icon: String
    template: String
    semesters: [SemesterInput]
}

input SemesterInput {
    note: String
    dateStart: String
    dateEnd: String
}
